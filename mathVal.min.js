/*
Description: Validate a logic expression, show the error messages and decorate the charactes that cause the errors
Author: Thai.Tran
Company: Nexcel Solution Corp.
*/
var expVal = function () { var t = function (t, r) { this.id = t, this.data = r, this.error = !1 }, r = []; return { validateLogicExpession: function (i, a) { var e = [], s = ["Expression is invalid", "Expression is missing (", "Expression is missing )"], n = [], o = i.split(a); this.buildArrayExp(o); for (var h = 0; h < r.length; ) { var d = r[h]; if (")" != d.data) n.push(new t(d.id, d.data)); else { for (var u = []; n.length > 0 && (l = n.pop(), "(" != l.data); ) u.push(new t(l.id, l.data)); "(" != l.data ? (this.detectError([d]), e.push(1)) : u.length > 0 && (0 == this.isValidLogic(u) && (this.detectError(u), e.push(0)), n.push(new t(-1, "T"))) } h++ } if (n.length > 0) { 0 == this.isValidLogic(n) && (this.detectError(n), e.push(0)); for (var h = 0; h < n.length; h++) { var l = n[h]; "(" == l.data && (this.detectError([l]), e.push(2)) } } return this.getResult(e, s) }, buildArrayExp: function (i) { for (var a = 0; a < i.length; a++) "" != i[a] && r.push(new t(a, i[a].trim())) }, isValidLogic: function (t) { var r = t.length; if (this.isOperator(t[0].data) || this.isOperator(t[r - 1].data)) return !1; for (var i = 0; r - 1 > i; ) { if (!this.isOperator(t[i].data) && !this.isBoolExp(t[i].data)) return !1; if (this.isOperator(t[i].data) && this.isOperator(t[i + 1].data)) return !1; if (this.isBoolExp(t[i].data) && this.isBoolExp(t[i + 1].data)) return !1; i++ } return this.isOperator(t[r - 1].data) || this.isBoolExp(t[r - 1].data) ? !0 : !1 }, isOperator: function (t) { var r = ["AND", "OR", "XOR", "NOT"]; return r.indexOf(t.toUpperCase()) > -1 }, isBoolExp: function (t) { var r = [">", "<", "=", ">=", "<="], i = t.split(" "); return 1 != i.length && 3 != i.length ? !1 : (1 != i.length || !this.isOperator(i[0]) && this.isValidCharacter(i[0])) && (3 != i.length || this.isValidCharacter(i[0]) && r.indexOf(i[1]) > -1 && this.isValidCharacter(i[2])) ? !0 : !1 }, isValidCharacter: function (t) { var r = /^[a-zA-Z]*$/; return r.test(t) ? !0 : !1 }, detectError: function (t) { for (var i = 0; i < t.length; i++) { for (var a = 0; a < r.length && r[a].id != t[i].id; ) a++; a < r.length && (r[a].error = !0) } }, injectFormat: function () { for (var t = "", i = 0; i < r.length; i++) t += r[i].error ? " <font size='3' color='red'>" + r[i].data + "</font>" : " " + r[i].data; return t }, injectErrorMsg: function (t, r) { for (var i = t.reduce(function (t, r) { return t.indexOf(r) < 0 && t.push(r), t }, []), a = "", e = 0; e < i.length; e++) a += r[i[e]] + " , "; return a }, getResult: function (t, i) { var a = this.injectErrorMsg(t, i) + this.injectFormat(); return r = [], a } } } ();